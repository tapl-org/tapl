Are base, labeled, function, union, and intersection types enough to describe all possible types?


Labeled type unifies single labeled record and labeled variant.

Record type can be defined as a intersection of several labeled types.
Sum type can be defined as a union of several labeled types.

Base type looks like a nominal type. Because it has only name, nothing else. 
If we see the Java class perspective then its type is intersection of record type and base type which has a name
Since Base type contains a string, we can generalize it such that it can contain any value unless it has a equal property

Performance optimization: 
use Record instead of Labeled. Labeled can be seen as single labeled Record type.
Variant is a union of single Record types. Is there any application for the union of non-single Record types?


Do we need a base type? 

can base type be defined using record type?
No, needs reserved keyword as a label, and extra dummy type instance. In addition to this, we should ignore the label when type checking.

Note:
In TypeScript, 
* a union type with no member (an empty union type) is considered equavalent to the "never" type.
* an empty intersection type is considered equavalent to the "any" type.

In a finite universe:
So Any type is a union of all types or intersection of no types, right?
then Nothing type is a intersection of all types or union of no types.

Type vs Set: https://cs.stackexchange.com/a/91345/163752
(Type value are CONSTRUCTED while set members are COLLECTED.)
This differences are more keen to math concept. In programming, if I consider them as same concept, where do I make a mistake?
Some conversations about this - https://www.reddit.com/r/ProgrammingLanguages/comments/oqpynj/types_versus_sets_in_math_and_programming/

Recursive type link - https://www3.nd.edu/~dchiang/teaching/pl/2022/mu.html

class Egg:
  color: str
  weight: float

class Milk:
  kind: str
  weight: float

Food = Egg | Milk

----

Egg = <color:str> & <weight:int>
Milk = <kind:str> & <weight:float>

Food = (<color:str> | <kind:str>) & <weight:(int | float)>
Food type is not represents the Egg|Milk union type. Because it can represent <color:str>&<weight:float>


Integer operations:
add = (x->x.a+x.b):((Int,Int)->Int)
  (Int,Int) = ({a=Int}&{b=Int>})->Int
            = {a=Int,b=Int}->Int
=         

add {a=3:Int,b=4:Int}
=



addInt = (x->x.a+x.b):{a=Int,b=Int}->Float   (assume all add operation returns Float)
addFloat = (x->x.a+x.b):{a=Float,b=Float}->Float

add = addInt | addFloat
= (x->x.a+x.b):{a=Int,b=Int}->Float | (x->x.a+x.b):{a=Float,b=Float}->Float

{a=Int,b=Int}->Float | {a=Float,b=Float}->Float
= ( {a=Int,b=Int} | {a=Float,b=Float}) -> Float

Is there a way to merge the following type:
{a=Int,b=Int} | {a=Float,b=Float}
is not equal to
{a=Int|Float, b=Int|Float}

Another example:
{a=Int,b=Int} | {a=Float,b=Int}
=({a=Int} | {a=Float}) & {b=Int}
={a=Int|Float, b=Int}


-----------------------
Another idea: There are only Value, Function, Union, and Intersection types
Attribute selection is actually substitution the variable with a function

When we create a new value type, then we should populate the context with list of functions to support this new type.
how about pair type: Pair type is a composite datastucture, for example left selection takes a pair, and extracts the left part.

Just curious, do I need a Union and Intersection types, these can be a Value type as well.
then what about Function type, it is a term. So it can be a Function or Function type. see ground-rules Syntax section.


btw, actually I should not check whether object has a method or not. Instead, I just call the method of object on the Type layer.

In TAPL, There is NO Type System inherently, there is a code running on different layers. Type System can be built on top of TAPL inherent features.


---------------------------------------------------------------------------------------------------------------

June 17, 2025

Changed mind :), TAPL has a Type System, but it can work on the same level with Term seamlessly.

{}:List[Int]  vs   {}:List[Bool]
Type -> Intention: List[Int] != List[Bool]
Set -> Extension: {} == {}   # empty sets are equal.

Thinking: Imagine there are list of byte spans. I need to give them a (meta) description, or I should label them.
These labels are my context. I have a sequence of labels, this is called code. A code can be stored as data.
To identify or distinguish different type of code, I give them a label. Now my data divided into 2 groups, code and other,
or in another word: constructed or atom. So, if we have a coding table (external) or we know how it is constructed (internal).
When using coding table term and type has a same label. For example 1:1, true:true. When using construction, term is
the result of running the code, and type is the label of that code. Whenever we need to refer that term, then we may need a label for it.
Since the code is a sequence build using some collection of label set, we need this label set. In closed form, these labels are actually
are parameters of the function. Can I assume that function is the building block not the code. No native fucntions are building blocks.
So Decoding table and Native functions are considered atom.

We have a long sequence of bytes, and we have a table which describes this byte sequence. The table has columns of label and span.
In addition to this we have a list of decoding table.

We have a list of bytes. We can devides them into spans, and each byte spans can act as code or data. In sequential application, 
this sequence needs label set (Context, Scope, Record)

To run the code, I need a proper context that can have more label than required, but I need all required labels.

So far what I have is a label and its corresponding byte spans, and I believe code knows how to use that labels.
  Context -> Code
  (Context, Code) -> Code
  It looks like a OOP, so OOP is context dependent system?

Definitions:
OOP - when you have a fixed set of operation and evolving set of thing.
FP  - when you have a evolving set of operations, and fixed set of thing.
So thing is a data, and operation is a code. Not actually???
Thing is a data structure, and operation is a function. Not really???
There is something more fundamental.
Class is a set of key-value pairs, and keys are fixed.
Pattern matching is a set of (pattern/key)-operation pairs, and patterns/keys are fixed.

Return back original idea: constructing a code
Byte spans --> label them --> {label:bytes}

Let's make little more abstract. Context is a object of given class. So OOP is fixed labels, and FP is a dispatcher.
In another word, OOP dispatches by label, FP dispatches by pattern matching.
So the program is a pair of context and code - (label, value)*, label*
Minimum context is empty set. Any context can be a placeholder for this EmptySet/TopType.
What is Bottom type then?
Bottom type can be placeholder for all possible context. It means it has all labels.

There are values, some of them can be a just a data like True, 42, 'Hello World', and some others can be a function.
We call it native (because we could not write a code for it), and the rest is composite vs constructed.
How to build composite: If it is a record, then it becomes OOP. If it is a variant, then it becomes FP, right?
Is pattern matching different from variant fundamentally.

In the beginning, there were only values(bytes). Computer knows how to apply one value to another.
Let's say we have 3 values: a, b, call
Applications can be: ab, a(bc), abc, (ba)c
When the value is not a funciton, then there is error or panic.
To introduce reusibility, we introduce abstraction. We label all values then we write the code/script using labels.

FP:
pair = \f.\s.\b. b f s
first = \p. p true
second = \p. p false

OOP:
class Pair:
  def __init__(f, s):
    self.f = f
    self.s = s
  def first(p):
    return p.f
  def second(p):
    return p.s

Pattern matching: Match a value against a set of patterns, and then execute specific code based on the matched pattern.
Virtual method: Get a function pointer from values virtual pointer table and execute it.

Basically, both works as a dispatcher to choose a code to run.
Generalization: There is a dispatch function which receives a value, and returns backa a pointer/label to the function/code-span.
Object/value contains some information, and we run a code against the value, such that the code understand the value and knows how to compute to find the next code.

OPP with FP: Instead of virtual table, and if only pattern match by labels, then we can define a new concept - Sparse Table.

Int
  inverse_int
Bool
  inverse_bool
Int&Bool
  inverse_int
  inverse_bool
Int|Bool
  oneof:
    inverse_int
    inverse_bool


---------------------------------------------------------------------------------------------------------------
June 19, 2025

Truth is machine does not have a function concept. Machine has sequence of instructions, each instruction has an address/pointer. 
Then machine can jump based on this address/pointer. We can name these addresses with a label to make it human readible and understandable.

---------------------------------------------------------------------------------------------------------------
June 28, 2025

class Square:
  def __init__(self, side: Int):
    self.side = side
  def area(self):
    return self.side ^ 2


Square = {
  '__init__': \(self:Square, side:Int).<<code>>
  'area': \self:Square.<<code>
}

Square0 = {   # name is Square
  '__init__': \(self,side).<<code>>
  'area': \self.<<code>>
}
Square1 = {   # name must be Square
  '__init__': (Square,Int) -> None
  'area': Square -> Int
}

Square0_Instance = {  # since it has many instances, it does not need a name
  'area': \.<<code>>
}
Square1_Instance = {   # As a singleton, it requires a name for variable/parameter typing.
  'area': () -> Int
}

On the otherhand, python users mostly do not use class directly, they mostly uses the instance of the class.

Square = [Square0_Instance, Square1_Instance]
new Square = [Square0, Square1]

But what about this call: MyClass.my_method(objAsSelf).
class name should belong to the class, instance should get different name.
On Term layer, instance does not need a static name, but on Type layer, instance needs a static name.
To sum up, we need 3 names: Term(Class name), Type(Class name, Instance name)
For now, a instance name is a class name followed by underscore.

---------------------------------------------------------------------------------------------------------------
July 4, 2025

Person:
  init: 
    \(self, name: Str):
      self.name = name
  name:
    \(self):
      return self.name

# methods are curried and closured by their first argument
# first argument: 
# self = Scope(parent=Person_)
# Person.init(self, )
person:
  self: Scope(parent=Person_)
  init:
    \(name: Str):
      self.name = name
  name:
    \():
      return self
     
---------------------------------------------------------------------------------------------------------------
August 1, 2025 - Continuation of June 17, 2025

We build context by dividing bytes into spans, and label each span (One requirement can be each span should support return statement like function).
Now we can create a new programm by selecting labels among that available labels, and sequence them.
Main question is how executor dereference those labels. There should be current dereferencer then, right?
Signature is like this: deref(label) -> return_start_pointer_of_referenced_span
How can I easily deref the deref function?

---------------------------------------------------------------------------------------------------------------
August 4, 2025 - Continuation of June 17, 2025

Main purpose of TAPL is a multi layer untyped computation calculus, where users can use one layer as type-checking, and another as evaluation.
So , the calculus is just a function with a guard. The guard first validates the argument, allows it to pass by if it passes validation.
For the dependent type, types contain a programmar, and a core challenge is that a type-checker or a guard should evaluate to check the equality.
This is not the way for the TAPL. Instead TAPL postpone the program, until the argument is available. Once it receives the argument, then evaluates those programms,
obtains the result, and make a structural comparison on those results.

